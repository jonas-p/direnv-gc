// Code generated by go-bindata.
// sources:
// shell/hook.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shellHookSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xdf\x6b\xdc\x46\x10\x7e\xd6\xfe\x15\x1f\x77\xa2\x77\x57\x22\x8b\x14\xda\x87\x84\x33\x09\x38\xb4\x7d\x68\x03\x69\x28\x85\x10\xc4\x7a\x35\xe7\x5d\xbc\xda\x55\xf7\xc7\x19\x63\xfb\x7f\x2f\x23\xa9\x39\xc5\x3a\xbf\x9c\x6e\x77\x67\xbe\xf9\x66\xe6\x9b\x69\x4d\x20\x77\x6c\x62\xf2\x81\x9a\xd6\x84\x7d\xf9\x70\xf5\xfb\xa7\x0f\x7f\xfe\xdd\xfc\xf5\xf9\xe3\xa7\x0f\x6f\xaa\xf2\xe1\x9f\xab\x5f\x9b\xab\xf7\x9f\xdf\x37\xbf\x7d\xfc\x83\x2f\xf8\x53\x5f\x58\xaf\xa4\xad\xa3\x96\x81\x9e\xea\x11\xa5\x1e\x50\x9e\x44\x77\xdb\x9a\x80\xaa\x47\xf9\x1c\x5d\x88\x35\x86\x03\x54\x0e\x81\x5c\x42\xf4\x39\x28\x6a\xc8\x1d\x21\x23\x9a\xd3\x51\xd0\x51\x5a\xac\xca\x6d\x4b\xca\xca\x40\xa8\x0e\x73\xe3\x47\x44\x6a\xb1\x79\x1d\xeb\x8b\x1f\xeb\xe6\x87\x7a\xb3\x5b\x2d\xc1\xa7\xf0\x56\xde\xfb\x9c\x9a\x5e\x26\x3d\x04\x59\x5e\x9f\x0b\xf6\xbd\x15\x67\x74\x36\xe6\x64\x76\xa3\x9a\x44\x5d\xdf\x1c\x8c\xa5\x7d\xb9\xed\x6e\xf9\xb4\x63\x4a\x4b\x1c\xe5\xb3\x6d\x71\x4d\x50\xd2\x5a\x6a\xd1\x65\x9b\x4c\x6f\x09\xc9\x74\x14\x71\xa7\xc9\x21\x64\xe7\x8c\xbb\xf9\xe6\x0f\x69\xad\xbf\x83\x74\x2d\x94\x74\x90\x36\xfa\x19\xc2\x21\xf8\x0e\x31\x5f\x47\x4d\xd6\x46\x50\x52\x88\x1e\x77\x84\x1c\x49\xac\x21\xc1\x6c\xc0\xdc\x90\xfc\x54\xa4\x09\x97\xfb\x98\x8c\x77\x91\xcd\x19\x3a\xf7\xad\x4c\x84\xa4\x09\xd6\xb8\xdb\x08\x2b\x13\x05\xb1\x16\x6b\x98\xb4\x89\x30\x5d\xef\x43\x92\x2e\x21\x69\xc9\x3f\x26\x42\xcb\xbe\x27\xc7\xa6\x31\xc1\xb8\xc1\x79\xc4\x0f\x0a\xd7\xa4\x64\x8e\x03\xa2\x58\x33\xa3\x80\xce\xdc\xe8\x04\x7f\xa4\x10\x4c\x4b\x30\x49\x2c\xaa\xb4\xdd\xe1\x41\x14\x83\xca\x30\xe8\x72\xdb\x2c\x2b\x59\xbe\xdb\x89\x82\x94\xf6\x83\xd4\x70\x79\x59\x9e\x69\xc7\xcc\x42\x3c\xcd\x1b\xc6\xe9\x8d\x61\xd6\x50\x81\x38\x6b\x89\x78\xdf\xf1\x3d\xd7\xe9\x94\x05\xc6\x98\x7c\x82\x71\x91\x39\xf3\xe3\x50\x48\x51\x4c\x88\x81\xa4\x9d\x91\xdb\x97\x5b\xbe\x19\x54\x37\xf0\x34\x07\x7c\xf9\x82\xaa\xc5\xaa\x3c\xef\xb1\xc2\xd7\xaf\x6f\x19\xd8\x89\xa2\x58\x24\xdb\x68\x19\xf5\xbe\xdc\x0e\xc9\x54\x0e\x2f\x80\xb0\x4a\xb5\xfc\xe9\xe7\x5f\x62\xee\xf0\x08\x95\x13\x87\xdc\x60\xc3\x9a\x7e\xbd\x3b\x21\x8f\x43\xc9\xf4\xf6\x8b\x39\xad\xcb\xf3\xe1\x85\x28\xc6\x62\xae\xc6\xf7\x37\x43\x09\x8c\xbb\x79\x91\x4d\x75\xf9\x6c\x0b\x70\xc0\x15\xe3\x58\x87\x2a\x1e\x5e\x74\x5c\x7a\x89\xa2\x48\x3e\x2b\x8d\xaa\xd3\x67\x9f\x0f\x86\xfb\x7b\x5a\x12\xff\xf7\x36\xd0\xa8\x78\x6f\xdb\x69\x85\x80\xdc\xf1\xd5\x28\x5d\x13\x71\xc8\x4e\xf1\x08\x70\xcf\x4f\x33\xe5\x9d\xa2\x57\x3c\x70\x0c\xe1\x7c\x1a\x87\x4c\xba\x7b\x28\x6d\x6c\x5b\xf7\x72\xb6\x63\x22\xb6\xe6\x82\x2e\x90\x23\x17\x63\xa2\x90\x7b\x56\xe7\x72\xb3\x34\x67\xf7\xd8\xec\xb6\x9e\xfd\xe5\x25\x53\xcc\x1c\xca\x77\x82\x09\x0d\x1a\xcd\xce\xfc\x9b\xe9\x1b\x85\x49\xb2\x93\x2a\xa3\x0f\x09\x55\xc6\xb9\x91\xc0\x23\xee\x34\x7f\x03\xc9\x96\xb1\xe8\x2d\x5a\x7f\xd2\xc6\x34\x1c\x28\xf9\x49\x14\xad\x77\x24\x9e\xc4\x7f\x01\x00\x00\xff\xff\x93\x0d\x6f\xa9\x2c\x06\x00\x00")

func shellHookShBytes() ([]byte, error) {
	return bindataRead(
		_shellHookSh,
		"shell/hook.sh",
	)
}

func shellHookSh() (*asset, error) {
	bytes, err := shellHookShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shell/hook.sh", size: 1580, mode: os.FileMode(420), modTime: time.Unix(1606936745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shell/hook.sh": shellHookSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shell": &bintree{nil, map[string]*bintree{
		"hook.sh": &bintree{shellHookSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

