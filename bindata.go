// Code generated by go-bindata.
// sources:
// shell/hook.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shellHookSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x8f\xdb\x36\x10\x3d\x8b\xbf\xe2\xc1\x16\x6a\xbb\x88\xd6\x48\x81\xf6\x90\xc0\x8b\x1c\x9a\x43\x2f\x2d\x90\x16\xbd\x04\x81\xc0\x25\x47\x16\xb1\x14\xa9\xf2\xc3\xc6\x22\xbb\xff\xbd\x18\x49\x8d\xd5\x48\x7b\xb1\x45\x72\xe6\xcd\x9b\x99\x37\xa3\x4d\x20\x77\xa9\x63\xf2\x81\x6a\x6d\xc2\xa9\xfc\xfa\xeb\x6f\x9f\x3e\xfe\xfe\x77\xfd\xe7\x5f\x7f\x7c\xfa\xf8\xae\x2a\x27\x0b\xe5\x5d\x63\xce\x6c\x72\x1c\x8c\x5f\x44\xf7\xa8\x4d\x40\xd5\xa3\xfc\x1e\x44\x88\x2d\x86\x03\x54\x0e\x81\x5c\x42\xf4\x39\x28\xaa\xc9\x5d\x20\x23\xea\xdb\x51\xd0\x45\x5a\x6c\xca\xbd\x26\x65\x65\x20\x54\xcd\xdc\xf8\x19\x91\x34\x76\x6f\xe3\xf1\xee\xc7\x63\xfd\xc3\x71\x77\xd8\x2c\xc1\xa7\xf0\x56\x3e\xf9\x9c\xea\x5e\xa6\x76\x08\xb2\xbc\x5e\x0b\xf6\x7f\x2b\xce\x68\x35\xe6\x64\x76\x56\x75\xa2\xae\xaf\x1b\x63\xe9\x54\xee\xbb\x47\x3e\x1d\x98\xd2\x12\x47\xf9\x6c\x35\x1e\x08\x4a\x5a\x4b\x1a\x5d\xb6\xc9\xf4\x96\x90\x4c\x47\x11\xd7\x96\x1c\x42\x76\xce\xb8\xf3\x37\x7f\x48\x6b\xfd\x15\xd2\x69\x28\xe9\x20\x6d\xf4\x33\x84\x26\xf8\x0e\x31\x3f\xc4\x96\xac\x8d\xa0\xa4\x10\x3d\xae\x84\x1c\x49\x6c\x21\xc1\x6c\xc0\xdc\x90\xfc\x54\xa4\x09\xd7\x7a\x25\x93\xf1\x2e\xb2\x39\x43\xe7\x5e\xcb\x44\x48\x2d\xc1\x1a\xf7\x18\x61\x65\xa2\x20\xb6\x62\x0b\x93\x76\x11\xa6\xeb\x7d\x48\xd2\x25\xa4\x56\xf2\x8f\x89\x68\x65\xdf\x93\x63\xd3\x98\x60\xdc\xe0\x3c\xe2\x07\x85\x07\x52\x32\xc7\x01\x51\x6c\x99\x51\x40\x67\xce\x6d\x82\xbf\x50\x08\x46\x13\x4c\x12\x8b\x2a\xed\x0f\xf8\x2a\x0a\x66\x67\x31\xc8\x6f\x5f\x2f\x2b\x59\x7e\x38\x88\x82\x54\xeb\x07\xa9\xe1\xfe\xbe\x5c\x69\xc7\xcc\x42\xbc\xcc\x1b\xc6\xe9\x8d\x61\xb6\x50\x81\x38\x6b\x89\xf8\xd4\xf1\x3d\xd7\xe9\x96\x05\xc6\x98\x7c\x82\x71\x91\x39\xf3\xe3\x50\x48\x51\x4c\x88\x81\xa4\x9d\x91\x3b\x95\x7b\xbe\x19\x54\x37\xf0\x34\x0d\x3e\x7f\x46\xa5\xb1\x29\xd7\x3d\x36\xf8\xf2\xe5\x3d\x03\x3b\x51\x14\x8b\x64\xeb\x56\xc6\xf6\x54\xee\x87\x64\x2a\x87\x57\x40\x58\xa5\xad\xfc\xe9\xe7\x5f\x62\xee\xf0\x0c\x95\x13\x87\xdc\x61\xc7\x9a\x7e\x7b\xb8\x21\x8f\x43\xc9\xf4\x4e\x8b\x39\x3d\x96\xeb\xe1\x85\x28\xc6\x62\x6e\xc6\xf7\x77\x43\x09\x8c\x3b\xbf\xca\xa6\xba\xff\x6e\x0b\x70\xc0\x0d\xe3\x58\x87\x2a\x36\xaf\x3a\x2e\xbd\x44\x51\x24\x9f\x55\x8b\xaa\x6b\x57\x9f\x1b\xc3\xfd\xbd\x2d\x89\xff\x7a\x1b\x68\x54\xbc\xb7\x7a\x5a\x21\x20\x77\x79\x33\x4a\xd7\x44\x34\xd9\x29\x1e\x01\xee\xf9\x6d\xa6\xbc\x53\xf4\x86\x07\x8e\x21\x9c\x4f\xe3\x90\x49\xf7\x04\xd5\x1a\xab\x8f\xbd\x9c\xed\x98\x88\xbd\xb9\xa3\x3b\xe4\xc8\xc5\x98\x28\xe4\x9e\xd5\xb9\xdc\x2c\xf5\xea\x1e\x9b\xdd\x1e\x67\x9f\xbc\x64\x8a\x99\x43\xf9\x41\x30\xa1\x41\xa3\xd9\x99\x7f\x32\x7d\xa3\x30\x49\x76\x52\x65\xf4\x21\xa1\xca\x58\x1b\x09\x3c\xe3\xda\xf2\x7f\x20\xa9\x19\x8b\xde\x43\xfb\x9b\x36\xa6\xe1\x40\xc9\x4f\xa2\xd0\xde\x91\x78\x11\xff\x06\x00\x00\xff\xff\xd7\xc2\xa2\x63\x13\x06\x00\x00")

func shellHookShBytes() ([]byte, error) {
	return bindataRead(
		_shellHookSh,
		"shell/hook.sh",
	)
}

func shellHookSh() (*asset, error) {
	bytes, err := shellHookShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shell/hook.sh", size: 1555, mode: os.FileMode(420), modTime: time.Unix(1606248357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shell/hook.sh": shellHookSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shell": &bintree{nil, map[string]*bintree{
		"hook.sh": &bintree{shellHookSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

