// Code generated by go-bindata.
// sources:
// shell/hook.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shellHookSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\xab\xdb\x30\x10\xc4\xef\xfa\x14\x83\x9f\xa8\xed\x82\x6a\x5e\xa1\x3d\xbc\x92\xd2\x43\x73\xe8\xa5\x85\xb4\xf4\x12\x82\x22\x64\x39\x12\xb1\xe5\x20\xc9\x81\x90\xe4\xbb\x17\xc9\xa1\x0e\xf9\x73\x31\xac\xf7\xb7\xb3\xc3\xac\x6a\xe3\x94\xdd\x73\x1f\x7a\xa7\x78\x6d\xdc\x8c\x1e\xbf\xff\x58\xcc\x7f\xfe\xe5\xbf\xff\xfc\x5a\xcc\xdf\x18\xbd\x10\xb2\xb7\x8d\xd9\x44\xa4\x4a\xf0\x99\x74\xdb\xda\x38\xb0\x1d\xe8\xad\x08\x21\x2f\x48\x05\xe4\xe0\x9c\xb2\x01\xbe\x1f\x9c\x54\x5c\xd9\x3d\x84\x07\x9f\x4a\xa2\xf6\xa2\x45\xb6\xae\x95\x6c\x85\x53\x60\xcd\x35\x7b\x82\x57\x35\xf2\x57\x5f\x7d\x78\x5f\xf1\x77\x55\xbe\xce\x08\x99\xfa\x45\x89\x23\xc1\xb5\x1c\xe8\x37\x42\x80\x17\x48\xa7\x44\x50\x10\xf0\x87\xae\x35\x76\x8b\xd0\x23\x68\x85\xd1\x2a\x5a\x71\xe8\x87\x10\x2b\x18\xeb\x4d\xad\x52\x33\x79\x26\xb8\x40\xdc\x29\xd1\xf2\x91\x1c\xa3\x29\xe2\x9f\x9d\x08\x1a\xb4\xb8\x30\x53\xbb\x2c\x09\x60\x1a\x2c\x97\x60\x35\x32\xfa\x58\x24\xc3\x6a\xf5\x25\x2e\xb3\x04\xf8\xbf\x69\xea\x73\x2d\xbc\x9e\xd1\x42\x49\xdd\x83\x59\x3c\x91\x89\xc9\x68\xf1\xf1\xd3\x67\x3f\x74\x38\x41\x0e\x21\x2e\xcd\x91\xc7\x00\x5f\xcb\x6b\xed\xf1\x2a\xd1\xf5\xec\xee\x50\x15\x7d\x6c\x20\xcd\xa7\x4f\xf2\x91\x8d\xd4\x5b\x0a\xc8\xd8\xcd\x53\x57\xec\xeb\xcd\x63\x88\x6b\xb3\x49\xad\xb5\x60\xbe\x79\x3a\x7e\x3f\x9b\xa6\x42\x3f\x48\x0d\xd6\xe9\xc7\x40\x63\xc8\x99\xfc\x0b\x00\x00\xff\xff\xb8\xda\x01\x45\xc8\x02\x00\x00")

func shellHookShBytes() ([]byte, error) {
	return bindataRead(
		_shellHookSh,
		"shell/hook.sh",
	)
}

func shellHookSh() (*asset, error) {
	bytes, err := shellHookShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shell/hook.sh", size: 712, mode: os.FileMode(420), modTime: time.Unix(1606163175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shell/hook.sh": shellHookSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shell": &bintree{nil, map[string]*bintree{
		"hook.sh": &bintree{shellHookSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

